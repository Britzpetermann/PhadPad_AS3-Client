<?xml version="1.0" encoding="utf-8"?>
<s:Application
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	addedToStage="init()"
	xmlns:example1="example1.*">

	<fx:Script>
		<![CDATA[
			import com.britzpetermann.phadpad.core.RemoteConnectionEvent;

			[Bindable]
			private var phadpadFacade : PhadpadFacade;

			private function init() : void
			{
				phadpadFacade = new PhadpadFacade();
				phadpadFacade.sprite = sprite;
				phadpadFacade.init();

				phadpadFacade.remoteConnection.addEventListener(RemoteConnectionEvent.START, handleConnectionStart);
				phadpadFacade.remoteConnection.addEventListener(RemoteConnectionEvent.CONNECT, handleConnectionConnect);
				phadpadFacade.remoteConnection.addEventListener(RemoteConnectionEvent.DISCONNECT, handleConnectionDisconnect);
				phadpadFacade.remoteConnection.addEventListener(RemoteConnectionEvent.CONNECT_ERROR, handleConnectionError);
				phadpadFacade.remoteConnection.addEventListener(RemoteConnectionEvent.WAIT_AND_RECONNECT, handleWaitAndReconnect);
				phadpadFacade.remoteConnection.addEventListener(RemoteConnectionEvent.CLOSE, handleConnectionClosed);
				phadpadFacade.remoteConnection.addEventListener(RemoteConnectionEvent.CONNECT_SUCCESS, handleConnectSuccess);

				statusText.appendText(getTime() + "Status:\n");
				statusText.appendText(getTime() + "Waiting for you to hit \"Connect\" button...\n");
			}

			private function handleConnectSuccess(event : RemoteConnectionEvent) : void
			{
				statusText.appendText(getTime() + "Connection success.\n");
			}

			private function handleConnectionClosed(event : RemoteConnectionEvent) : void
			{
				statusText.appendText(getTime() + "Connection was closed.\n");
			}

			private function handleWaitAndReconnect(event : RemoteConnectionEvent) : void
			{
				statusText.appendText(getTime() + "I try to reconnect in some seconds. Please wait...\n");
			}

			private function handleConnectionError(event : RemoteConnectionEvent) : void
			{
				statusText.appendText(getTime() + "Connection error.\n");
			}

			private function handleConnectionStart(event : RemoteConnectionEvent) : void
			{
				statusText.appendText(getTime() + "Continuously trying to connect to " + addressInput.text + " at port 4446.\n");
			}

			private function handleConnectionConnect(event : RemoteConnectionEvent) : void
			{
				statusText.appendText(getTime() + "I am trying to connect. Please wait...\n");
			}

			private function handleConnectionDisconnect(event : RemoteConnectionEvent) : void
			{
				statusText.appendText(getTime() + "Stop connection or connecting.\n");
			}

			private function getTime() : String
			{
				return "[" + new Date().getTime() + "] ";
			}
		]]>
	</fx:Script>

	<s:VGroup
		width="100%"
		height="100%"
		gap="10"
		paddingLeft="10"
		paddingRight="10"
		paddingTop="10">
		<s:Label
			text="Start PhädPäd and enter the displayed IP address below. Then hit 'Connect' and touch and move the PhädPäd."/>

		<s:TextArea
			width="100%"
			id="statusText"/>

		<s:HGroup>
			<s:TextInput
				id="addressInput"
				text="@{phadpadFacade.phadpadAddress}"
				toolTip="IP address of PhädPäd"/>

			<mx:Button
				enabled="{!phadpadFacade.remoteConnection.isConnectedOrConnecting}"
				label="Connect"
				click="phadpadFacade.connect()"
				toolTip="Connect to PhädPäd..."/>

			<mx:Button
				enabled="{phadpadFacade.remoteConnection.isConnectedOrConnecting}"
				label="Abort Connection"
				click="phadpadFacade.disconnect()"
				toolTip="Abort connection or connecting to PhädPäd..."/>

			<mx:Button
				enabled="{phadpadFacade.remoteConnection.isConnected}"
				label="Send Image"
				click="phadpadFacade.sendImage()"
				toolTip="Send current stage image to PhädPäd"/>
		</s:HGroup>

		<s:SpriteVisualElement
			id="sprite"
			width="100%"
			height="100%"
			alpha="0.3">
		</s:SpriteVisualElement>
	</s:VGroup>

	<s:HGroup
		width="100%"
		height="100%"
		horizontalAlign="center">
		<s:VGroup
			width="250"
			height="100%"
			verticalAlign="middle">

			<example1:AccelerationSlider
				text="X"
				acceleration="{phadpadFacade.accelerationX}"/>

			<example1:AccelerationSlider
				text="Y"
				acceleration="{phadpadFacade.accelerationY}"/>

			<example1:AccelerationSlider
				text="Z"
				acceleration="{phadpadFacade.accelerationZ}"/>

		</s:VGroup>
	</s:HGroup>

</s:Application>